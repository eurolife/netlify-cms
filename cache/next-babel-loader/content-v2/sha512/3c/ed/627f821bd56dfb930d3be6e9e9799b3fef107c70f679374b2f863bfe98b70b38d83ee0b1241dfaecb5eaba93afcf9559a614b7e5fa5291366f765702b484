{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport renderToString from \"next-mdx-remote/render-to-string\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport matter from \"gray-matter\";\nimport { fetchPageContent, listPageContent } from \"../lib/pages\";\nimport fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport PageLayout from \"../components/PageLayout\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\nconst components = {\n  InstagramEmbed,\n  YouTube,\n  TwitterTweetEmbed\n};\n\nconst slugToPostContent = (postContents => {\n  let hash = {};\n  postContents.forEach(it => hash[it.slug] = it);\n  return hash;\n})(fetchPageContent());\n\nexport default function Post({\n  title,\n  slug,\n  image,\n  pages,\n  source,\n  builder\n}) {\n  const content = hydrate(source, {\n    components\n  });\n  return /*#__PURE__*/_jsx(PageLayout, {\n    title: title,\n    slug: slug,\n    image: image,\n    pages: pages,\n    builder: builder,\n    children: content\n  });\n}\nexport const getStaticPaths = async () => {\n  const paths = fetchPageContent().map(it => \"/\" + it.slug);\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const pages = listPageContent();\n  const slug = params.page;\n  const source = fs.readFileSync(slugToPostContent[slug].fullPath, \"utf8\");\n  const {\n    content,\n    data\n  } = matter(source, {\n    engines: {\n      yaml: s => yaml.load(s, {\n        schema: yaml.JSON_SCHEMA\n      })\n    }\n  });\n  const mdxSource = await renderToString(content, {\n    components,\n    scope: data\n  });\n  const builder = data.builder ? data.builder : null;\n  return {\n    props: {\n      pages,\n      title: data.title,\n      slug: data.slug,\n      image: data.image,\n      source: mdxSource,\n      builder\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}